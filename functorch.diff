commit d7b989338663e7896299f49565869adc8d743ff3
Author: Zachary DeVito <zdevito@fb.com>
Date:   Thu May 5 12:49:46 2022 -0700

    API functions to inject custom vmap levels onto dispatch stack

diff --git a/functorch/csrc/DynamicLayer.cpp b/functorch/csrc/DynamicLayer.cpp
index 3b8894c..85029fc 100644
--- a/functorch/csrc/DynamicLayer.cpp
+++ b/functorch/csrc/DynamicLayer.cpp
@@ -193,11 +193,9 @@ static DynamicLayer popDynamicLayer() {
 
 static int64_t pushDynamicLayer(DynamicLayer&& dynamic_layer) {
   auto& dynamicLayerStack = dynamicLayerStackAccessor();
-  int64_t layerId = 1 + dynamicLayerStack.size();
-  TORCH_INTERNAL_ASSERT(layerId == dynamic_layer.layerId());
   dynamicLayerStack.emplace_back(dynamic_layer);
 
-  if (layerId == 1) {
+  if (dynamicLayerStack.size() == 1) {
     setDynamicLayerFrontBackKeysIncluded(true);
 #ifdef HAS_TORCH_SHOW_DISPATCH_TRACE
     if (c10::show_dispatch_trace_enabled()) {
@@ -206,7 +204,7 @@ static int64_t pushDynamicLayer(DynamicLayer&& dynamic_layer) {
 #endif
   }
 
-  return layerId;
+  return dynamic_layer.layerId();
 }
 
 int64_t initAndPushDynamicLayer(
@@ -215,12 +213,12 @@ int64_t initAndPushDynamicLayer(
     optional<RandomnessType> randomness,
     optional<bool> prev_grad_mode,
     optional<bool> prev_fwd_grad_mode,
-    optional<bool> functionalize_add_back_views) {
+    optional<bool> functionalize_add_back_views,
+    optional<int64_t> layer_id) {
   const auto& dynamicLayerStack = dynamicLayerStackAccessor();
-  const auto layerId = 1 + dynamicLayerStack.size();
+  const auto layerId = layer_id ? *layer_id : (1 + dynamicLayerStack.size());
   DynamicLayer new_layer(transform_type, layerId, batch_size, randomness, prev_grad_mode, prev_fwd_grad_mode, functionalize_add_back_views);
   pushDynamicLayer(std::move(new_layer));
-
   auto& data = getGlobalDynmetaData();
 
   TORCH_INTERNAL_ASSERT(data.find(layerId) == data.end());
diff --git a/functorch/csrc/DynamicLayer.h b/functorch/csrc/DynamicLayer.h
index cf84311..ba1fa71 100644
--- a/functorch/csrc/DynamicLayer.h
+++ b/functorch/csrc/DynamicLayer.h
@@ -57,7 +57,8 @@ FUNCTORCH_API int64_t initAndPushDynamicLayer(
     optional<RandomnessType> randomness = nullopt,
     optional<bool> prev_grad_mode = nullopt,
     optional<bool> prev_fwd_grad_mode = nullopt,
-    optional<bool> functionalize_add_back_views = nullopt);
+    optional<bool> functionalize_add_back_views = nullopt,
+    optional<int64_t> layer_id = nullopt);
 FUNCTORCH_API DynamicLayer popDynamicLayerAndDeleteMetadata();
 FUNCTORCH_API c10::optional<DynamicLayer> maybeCurrentDynamicLayer();
 FUNCTORCH_API const std::vector<DynamicLayer>& getDynamicLayerStack();
diff --git a/functorch/csrc/init.cpp b/functorch/csrc/init.cpp
index 35ce5f3..6b0d32d 100644
--- a/functorch/csrc/init.cpp
+++ b/functorch/csrc/init.cpp
@@ -239,6 +239,18 @@ int64_t _vmap_increment_nesting(int64_t batch_size, const std::string& randomnes
   return initAndPushDynamicLayer(TransformType::Vmap, batch_size, get_randomness_enum(randomness));
 }
 
+void _vmap_add_layers(const std::vector<std::pair<int64_t, int64_t>>& levels) {
+  for (const auto l : levels) {
+    initAndPushDynamicLayer(TransformType::Vmap, l.second, RandomnessType::Different, nullopt, nullopt, nullopt, l.first);
+  }
+}
+
+void _vmap_remove_layers(int N) {
+  for (int i = 0; i < N; ++i) {
+    popDynamicLayerAndDeleteMetadata();
+  }
+}
+
 int64_t _vmap_decrement_nesting() {
   auto layer = popDynamicLayerAndDeleteMetadata();
   TORCH_INTERNAL_ASSERT(layer.key() == TransformType::Vmap);
@@ -367,6 +379,9 @@ PYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {
   m.def("_propagate_functional_input_mutation", &at::functorch::_propagate_functional_input_mutation, "propagate functional input mutations");
   m.def("_unwrap_functional_tensor", &at::functorch::_unwrap_functional_tensor, "remove functional tensor");
   m.def("_vmap_increment_nesting", &at::functorch::_vmap_increment_nesting, "remove batch dim");
+  m.def("_vmap_add_layers", &at::functorch::_vmap_add_layers, "make layer ids active");
+  m.def("_vmap_remove_layers", &at::functorch::_vmap_remove_layers, "remove N active layers");
+
   m.def("_vmap_decrement_nesting", &at::functorch::_vmap_decrement_nesting, "remove batch dim");
   m.def("_func_increment_nesting", &at::functorch::_func_increment_nesting, "functionalization start");
   m.def("_func_decrement_nesting", &at::functorch::_func_decrement_nesting, "functionalization end");
